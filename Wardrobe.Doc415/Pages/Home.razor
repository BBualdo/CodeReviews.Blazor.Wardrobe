@page "/"
@using Models
@using Data
@inject NavigationManager NavigationManager
@inject WardrobeController controller

<PageTitle>My Wardrobe</PageTitle>

<h1>Wardrobe contents</h1>

<div class="row mb-4">
    <div class="col-sm-6">
        <button type="button" @onclick="AddNewCloth" class="btn btn-primary">Add new cloth</button>

    </div>
</div>

@if (myClothes is null || myClothes.Count<1)
{
    <p>Your wardrobe is such emty!</p>
}
else
{

    <DeleteCloth cloth="@currentCloth" OnClose="@OnDeleteModelClose"></DeleteCloth>
    <div class="row">
      @foreach (var cloth in myClothes)
    {
        <div class="card col-sm-6 m-3" style="width: 18rem;">
            <img class="card-img-top" src="@cloth.ImageUrl" alt="Card image cap">
            <div class="card-body">
                <h5 class="card-title">@cloth.Name</h5>
                <p class="card-text">Category: @cloth.Category</p>
                <p class="card-text">Color: @cloth.Color</p>
                <p class="card-text">For weather: @cloth.Weather</p>
                <button type="button" @onclick="(()=> EditCloth(cloth.Id))" class="btn btn-outline-secondary bi bi-pencil"></button>
                <button type="button" 
                    data-bs-toggle="modal" 
                    data-bs-target="#deleteModal"
                    @onclick="()=> currentCloth=cloth" 
                    class="btn btn-outline-danger bi bi-trash3"></button>
            </div>
        </div>
    }
    </div>
}




@code{
    private List<Cloth>? myClothes;

    private Cloth? currentCloth;

    protected async override Task OnInitializedAsync ()
    {
        myClothes = await controller.GetAllClothes();
    }

    private void AddNewCloth(){
        NavigationManager.NavigateTo("/Cloth");
    }

    private void EditCloth (int id)
    {
        NavigationManager.NavigateTo($"/Cloth/{id}");
    }

    private async void  OnDeleteModelClose (bool accepted)
    {
        if (accepted)
        {
            await controller.DeleteCloth(currentCloth!.Id);
            myClothes = await controller.GetAllClothes();
        }
    }
}
